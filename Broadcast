Create an android app to Connect to the Internet and use BroadcastReceiver. 
 
AndroidManifest.xml 


<?xml version="1.0" encoding="utf-8"?> 
<manifest xmlns:android="http://schemas.android.com/apk/res/android"     package="com.android.fundamentals.powerreceiver">  
    <application 
        android:allowBackup="true"         android:icon="@mipmap/ic_launcher"         android:label="@string/app_name"         android:roundIcon="@mipmap/ic_launcher_round"         android:supportsRtl="true"         android:theme="@style/AppTheme">  
        <receiver 
            android:name="com.android.fundamentals.powerreceiver.CustomReceiver"             android:exported="true"> 
            <intent-filter>                 <action android:name="android.intent.action.ACTION_POWER_CONNECTED"/> 
                <action android:name="android.intent.action.ACTION_POWER_DISCONNECTED"/> 
            </intent-filter> 
        </receiver> 
 
        <activity android:name=".MainActivity"> 
            <intent-filter> 
                <action android:name="android.intent.action.MAIN" />  
                <category android:name="android.intent.category.LAUNCHER" /> 
            </intent-filter> 
        </activity>     </application> 
 
</manifest> 
 
CustomReceiver.java 



package com.android.fundamentals.powerreceiver; 
 
import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.widget.Toast; 
 
/** 
*	Broadcast Receiver implementation that delivers a custom Toast  * message when it receives any of the registered broadcasts. 
 */ public class CustomReceiver extends BroadcastReceiver { 
 
    // String constant that defines the custom broadcast Action.     private static final String ACTION_CUSTOM_BROADCAST = 
            BuildConfig.APPLICATION_ID + ".ACTION_CUSTOM_BROADCAST";  
    /** 
*	This callback method gets called when the Broadcast Receiver receives a      * broadcast that it is registered for. 
     * 
*	@param context The context in which broadcast receiver is running.      * @param intent The broadcast is delivered in the form of an intent which      *               contains the broadcast action. 
     */     @Override     public void onReceive(Context context, Intent intent) { 
        String intentAction = intent.getAction(); 
 
        if (intentAction != null) { 
            String toastMessage = context.getString(R.string.unknown_action);             switch (intentAction){                 case Intent.ACTION_POWER_CONNECTED:                     toastMessage = context.getString(R.string.power_connected);                     break;                 case Intent.ACTION_POWER_DISCONNECTED:                     toastMessage = 
                            context.getString(R.string.power_disconnected);                     break;                 case ACTION_CUSTOM_BROADCAST:                     toastMessage = 
                            context.getString(R.string.custom_broadcast_toast);                     break; 
            } 
 
            Toast.makeText(context, toastMessage, Toast.LENGTH_SHORT).show(); 
        } 
    } 
} 
 
MainActivity.java 


package com.android.fundamentals.powerreceiver; 
 
import android.content.Intent; import android.content.IntentFilter; 
import android.support.v4.content.LocalBroadcastManager; import android.support.v7.app.AppCompatActivity; 
import android.os.Bundle; import android.view.View; 
 
/** 
*	The Power Receiver app responds to system broadcasts about the power 
*	connected state as well as a custom broadcast that is sent when the user 
*	taps the button. 
 */ 
public class MainActivity extends AppCompatActivity { 
 
    private CustomReceiver mReceiver = new CustomReceiver(); 
 
    // String constant that defines the custom broadcast Action. 
    private static final String ACTION_CUSTOM_BROADCAST = 
            BuildConfig.APPLICATION_ID + ".ACTION_CUSTOM_BROADCAST";      @Override 
    protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main); 
 
        // Define the IntentFilter. 
        IntentFilter filter = new IntentFilter(); 
        // Add system broadcast actions sent by the system when the power is 
        // connected and disconnected.         filter.addAction(Intent.ACTION_POWER_CONNECTED);         filter.addAction(Intent.ACTION_POWER_DISCONNECTED); 
 
        // Register the receiver using the activity context, passing in the 
        // IntentFilter.         this.registerReceiver(mReceiver, filter); 
 
        // Register the receiver to receive custom broadcast. 
        LocalBroadcastManager.getInstance(this).registerReceiver 
                (mReceiver, new IntentFilter(ACTION_CUSTOM_BROADCAST)); 
    } 
 
    /** 
*	Click event handler for the button, that sends custom broadcast using the 
*	LocalBroadcastManager. 
     */ 
    public void sendCustomBroadcast(View view) { 
        Intent customBroadcastIntent = new Intent(ACTION_CUSTOM_BROADCAST); 
        LocalBroadcastManager.getInstance(this) 
                .sendBroadcast(customBroadcastIntent); 
    } 
 
    /** 
*	Unregisters the broadcast receivers when the app is destroyed. 
     */     @Override 
    protected void onDestroy() {         // Unregister the receivers. 
        this.unregisterReceiver(mReceiver); 
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mReceiver);         super.onDestroy(); 
    } 
} 
 
